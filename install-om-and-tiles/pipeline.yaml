resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

resources:
- name: pcf-automation-tasks
  type: s3
  source:
    access_key_id: ((s3_access_key_id))
    bucket: ((s3.buckets.pcf_automation))
    region_name: ((s3.region_name))
    secret_access_key: ((s3_secret_access_key))
    regexp: .*tasks-(.*).zip

- name: pcf-automation-image
  type: s3
  source:
    access_key_id: ((s3_access_key_id))
    bucket: ((s3.buckets.pcf_automation))
    region_name: ((s3.region_name))
    secret_access_key: ((s3_secret_access_key))
    regexp: .*image-(.*).tgz

- name: pcf-automation-extension-tasks
  type: git
  source:
    uri: ((extension-tasks.uri))
    branch: master

- name: installation
  type: s3
  source:
    access_key_id: ((s3_access_key_id))
    bucket: ((s3.buckets.installation))
    region_name: ((s3.region_name))
    secret_access_key: ((s3_secret_access_key))
    versioned_file: installation.zip

# - name: opsman-image
#   type: s3
#   source:
#     access_key_id: ((s3_access_key_id))
#     bucket: ((s3.buckets.product))
#     regexp: ((opsman_image_s3_versioned_regexp)) # vsphere ex: pcf-vsphere-(.*).ova
#     region_name: ((s3.region_name))
#     secret_access_key: ((s3_secret_access_key))

- name: opsman-image
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: ops-manager
    product_version: ((opsman_version))
    sort_by: semver

- name: stemcell
  type: s3
  source:
    access_key_id: ((s3_access_key_id))
    bucket: ((s3.buckets.stemcell))
    regexp: bosh-stemcell-(.*)-ubuntu-xenial-go_agent.tgz
    region_name: ((s3.region_name))
    secret_access_key: ((s3_secret_access_key))

- name: pas-product
  type: s3
  source:
    access_key_id: ((s3_access_key_id))
    bucket: ((s3.buckets.product))
    regexp: srt-(.*).pivotal # Modified this to indicate small footprint
    region_name: ((s3.region_name))
    secret_access_key: ((s3_secret_access_key))

- name: healthwatch-product
  type: s3
  source:
    access_key_id: ((s3_access_key_id))
    bucket: ((s3.buckets.product))
    regexp: p-healthwatch-(.*).pivotal
    region_name: ((s3.region_name))
    secret_access_key: ((s3_secret_access_key))

- name: pcf-automation-output-director-config
  type: s3
  source:
    access_key_id: ((s3_access_key_id))
    bucket: ((s3.buckets.pcf_automation_output))
    region_name: ((s3.region_name))
    secret_access_key: ((s3_secret_access_key))
    versioned_file: director.yml

- name: pcf-automation-output-healthwatch-config
  type: s3
  source:
    access_key_id: ((s3_access_key_id))
    bucket: ((s3.buckets.pcf_automation_output))
    region_name: ((s3.region_name))
    secret_access_key: ((s3_secret_access_key))
    versioned_file: p-healthwatch.yml

- name: pcf-automation-output-pas-config
  type: s3
  source:
    access_key_id: ((s3_access_key_id))
    bucket: ((s3.buckets.pcf_automation_output))
    region_name: ((s3.region_name))
    secret_access_key: ((s3_secret_access_key))
    versioned_file: cf.yml

# configurations

- name: configuration
  type: git
  source:
    private_key: ((configuration_git_repo.private_key))
    uri: ((configuration.uri))
    branch: master

# - name: variable
#   type: git
#   source:
#     private_key: ((variable_git_repo.private_key))
#     uri: ((variable.uri))
#     branch: master

# triggers used to have jobs do something in a timely manner

- name: one-time-trigger
  type: time
  source:
    interval: 999999h

- name: daily-trigger
  type: time
  source:
    interval: 24h

jobs:
- name: install-opsman
  serial: true
  serial_groups: [ install ]
  plan:
  - aggregate:
    - get: pcf-automation-image
      params:
        unpack: true
    - get: one-time-trigger
      trigger: true
    - get: pcf-automation-tasks
      params:
        unpack: true
    - get: configuration
    - get: pcf-automation-extension-tasks
    - get: opsman-image
      params:
        globs: ["((opsman_image_wildcard))"]        
    
  - task: credhub-interpolate
    image: pcf-automation-image
    file: pcf-automation-extension-tasks/tasks/credhub-interpolate-specific-dir.yml
    input_mapping:
      files: configuration
    params:
      # all required
      CREDHUB_CA_CERT: ((credhub_ca_cert.certificate))
      CREDHUB_CLIENT: concourse_to_credhub
      CREDHUB_SECRET: ((concourse_to_credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      PREFIX: /lab-foundation
      INTERPOLATE_PATH: ((foundation))/vars
  - task: create-vm
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/create-vm.yml
    input_mapping:
      image: opsman-image
      state: configuration
      config: configuration
      vars: interpolated-files
    params:
      VARS_FILES: vars/opsman-vars.yml
      STATE_FILE: ((foundation))/state/state.yml
      OPSMAN_CONFIG_FILE: ((foundation))/config/opsman.yml
    ensure: &make-state-commit
      do:
        # - task: make-commit
        #   image: pcf-automation-image
        #   file: pcf-automation-tasks/tasks/make-git-commit.yml
        #   input_mapping:
        #     repository: configuration
        #     file-source: generated-state
        #   output_mapping:
        #     repository-commit: configuration-commit
        #   params:
        #     FILE_SOURCE_PATH: state.yml
        #     FILE_DESTINATION_PATH: ((foundation))/state/state.yml
        #     GIT_AUTHOR_EMAIL: "pcf-pipeline-bot@example.com"
        #     GIT_AUTHOR_NAME: "PCF Automation Bot"
        #     COMMIT_MESSAGE: 'Update state file'
        - task: make-commit
          image: pcf-automation-image
          config:
            platform: linux
            inputs:
              - name: generated-state
              - name: configuration
            outputs:
              - name: configuration-commit
            run:
              path: bash
              args:
                - -c
                - |
                  set -eu
                  git clone configuration configuration-commit
                  cp generated-state/state.yml configuration-commit/((foundation))/state/state.yml
                  cd configuration-commit
                  git add -A
                  git config --global user.email "dpfeffer@pivotal.io"
                  git config --global user.name "Dodd Pfeffer"
                  git commit -m 'updated the state file' || true        
        - put: configuration
          params:
            repository: configuration-commit
            rebase: true
  - task: configure-authentication
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/configure-authentication.yml
    attempts: 10
    input_mapping:
      env: interpolated-files
      config: interpolated-files
    params:
      ENV_FILE: env.yml
      AUTH_CONFIG_FILE: auth.yml
  - task: configure-director
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/configure-director.yml
    input_mapping:
      config: configuration
      env: interpolated-files
      vars: interpolated-files
    params:
      VARS_FILES: vars/director-vars.yml
      ENV_FILE: env.yml
      DIRECTOR_CONFIG_FILE: ((foundation))/config/director.yml
  - task: apply-director-changes
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/apply-director-changes.yml
    input_mapping:
      env: interpolated-files
    params:
      ENV_FILE: env.yml

- name: staged-director-config
  serial: true
  plan:
  - aggregate:
    - get: pcf-automation-tasks
      params: {unpack: true}
    - get: pcf-automation-image
      params: {unpack: true}
    - get: configuration
  - task: staged-director-config
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/staged-director-config.yml
    input_mapping:
      env: configuration
    params:
      ENV_FILE: ((foundation))/env/env.yml
  - put: pcf-automation-output-director-config # DODD: added this to get it to compile
    params:
      file: generated-config/director.yml

- name: export-installation
  serial: true
  plan:
  - aggregate:
    - get: daily-trigger
      trigger: true
    - get: pcf-automation-image
      params:
        unpack: true
    - get: pcf-automation-tasks
      params:
        unpack: true
    - get: configuration
    - get: pcf-automation-extension-tasks
  - task: credhub-interpolate
    image: pcf-automation-image
    file: pcf-automation-extension-tasks/tasks/credhub-interpolate-specific-dir.yml
    input_mapping:
      files: configuration
    params:
      # all required
      CREDHUB_CA_CERT: ((credhub_ca_cert.certificate))
      CREDHUB_CLIENT: concourse_to_credhub
      CREDHUB_SECRET: ((concourse_to_credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      PREFIX: /lab-foundation
      INTERPOLATE_PATH: ((foundation))/vars
  - task: export-installation
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/export-installation.yml
    input_mapping:
      env: interpolated-files
    params:
      ENV_FILE: env.yml
  - put: installation
    params:
      file: installation/installation.zip

- name: upgrade-opsman
  serial: true
  serial_groups: [ install ]
  plan:
  - aggregate:
    - get: one-time-trigger
      passed: [ install-opsman ]
    - get: pcf-automation-image
      params:
        unpack: true
      trigger: true
    - get: pcf-automation-tasks
      params:
        unpack: true
    - get: opsman-image
      params:
        globs: ["((opsman_image_wildcard))"]
    - get: installation
      passed: [ export-installation ]
    - get: configuration
    - get: pcf-automation-extension-tasks
  - task: credhub-interpolate
    image: pcf-automation-image
    file: pcf-automation-extension-tasks/tasks/credhub-interpolate-specific-dir.yml
    input_mapping:
      files: configuration
    params:
      # all required
      CREDHUB_CA_CERT: ((credhub_ca_cert.certificate))
      CREDHUB_CLIENT: concourse_to_credhub
      CREDHUB_SECRET: ((concourse_to_credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      PREFIX: /lab-foundation
      INTERPOLATE_PATH: ((foundation))/vars
  - task: upgrade-opsman
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/upgrade-opsman.yml
    input_mapping:
      image: opsman-image
      state: configuration
      config: configuration
      env: interpolated-files
      vars: configuration
    params:
      VARS_FILES: vars/((foundation))/vars/opsman-vars.yml
      ENV_FILE: env.yml
      OPSMAN_CONFIG_FILE: ((foundation))/config/opsman.yml
      STATE_FILE: ((foundation))/state/state.yml
    ensure: *make-state-commit
  - task: apply-director-changes
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/apply-director-changes.yml
    input_mapping:
      env: interpolated-files
    params:
      ENV_FILE: env.yml

- name: upload-and-stage-pas
  serial: true
  plan:
  - aggregate:
    - get: pcf-automation-image
      params:
        unpack: true
      passed:
      - upgrade-opsman
      trigger: true
    - get: pcf-automation-tasks
      params:
        unpack: true
    - get: pas-product
    - get: configuration
    - get: pcf-automation-extension-tasks
  - task: credhub-interpolate
    image: pcf-automation-image
    file: pcf-automation-extension-tasks/tasks/credhub-interpolate-specific-dir.yml
    input_mapping:
      files: configuration
    params:
      # all required
      CREDHUB_CA_CERT: ((credhub_ca_cert.certificate))
      CREDHUB_CLIENT: concourse_to_credhub
      CREDHUB_SECRET: ((concourse_to_credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      PREFIX: /lab-foundation
      INTERPOLATE_PATH: ((foundation))/vars
  - task: upload-product
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: pas-product
      env: interpolated-files
    params:
      ENV_FILE: env.yml
  - task: stage-product
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: pas-product
      env: interpolated-files
    params:
      ENV_FILE: env.yml

- name: configure-pas
  serial: true
  plan:
  - aggregate:
    - get: pcf-automation-image
      params:
        unpack: true
      passed:
      - upload-and-stage-pas
      trigger: true
    - get: pcf-automation-tasks
      params:
        unpack: true
    - get: configuration
    - get: pcf-automation-extension-tasks
  - task: credhub-interpolate
    image: pcf-automation-image
    file: pcf-automation-extension-tasks/tasks/credhub-interpolate-specific-dir.yml
    input_mapping:
      files: configuration
    params:
      # all required
      CREDHUB_CA_CERT: ((credhub_ca_cert.certificate))
      CREDHUB_CLIENT: concourse_to_credhub
      CREDHUB_SECRET: ((concourse_to_credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      PREFIX: /lab-foundation
      INTERPOLATE_PATH: ((foundation))/vars
  - task: configure-pas
    image: pcf-automation-image
    config:
      platform: linux
      inputs:
        - name: configuration
        - name: interpolated-files
      params:
        CONFIG_FILE: ((foundation))/config/cf.yml
        VARS_FILES: interpolated-files/cf-vars.yml
        ENV_FILE: interpolated-files/env.yml
        CORE_DOMAIN: ((core_domain))
        CLOUD_CONTROLLER_SYSTEM_DOMAIN: ((cloud_controller_system_domain))
        CLOUD_CONTROLLER_APPS_DOMAIN: ((cloud_controller_apps_domain))
      run:
        path: bash
        args:
          - -c
          - |
            p-automator -v
            # set -eux

            curl -L -o jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
            chmod +x jq

            vars_files_args=("")
            for vf in ${VARS_FILES}
            do
              vars_files_args+=("--vars-file ${vf}")
            done

            {
              DOMAINS="*.$CORE_DOMAIN,*.$CLOUD_CONTROLLER_SYSTEM_DOMAIN,*.$CLOUD_CONTROLLER_APPS_DOMAIN,*.login.$CLOUD_CONTROLLER_SYSTEM_DOMAIN,*.uaa.$CLOUD_CONTROLLER_SYSTEM_DOMAIN"
              CERTIFICATE=`om --env "${ENV_FILE}" generate-certificate -d $DOMAINS`
              export OM_VAR_properties_networking_poe_ssl_certs_0_certificate_cert_pem=`echo $CERTIFICATE | ./jq ".certificate" -r`
              export OM_VAR_properties_networking_poe_ssl_certs_0_certificate_private_key_pem=`echo $CERTIFICATE | ./jq ".key" -r`

              DOMAINS="*.login.$CLOUD_CONTROLLER_SYSTEM_DOMAIN,*.uaa.$CLOUD_CONTROLLER_SYSTEM_DOMAIN"
              CERTIFICATE=`om --env "${ENV_FILE}" generate-certificate -d $DOMAINS`
              export OM_VAR_uaa_service_provider_key_credentials_cert_pem=`echo $CERTIFICATE | ./jq ".certificate" -r`
              export OM_VAR_uaa_service_provider_key_credentials_private_key_pem=`echo $CERTIFICATE | ./jq ".key" -r`
            } 2> /dev/null

            # ${vars_files_args[@] needs to be globbed in order to pass through properly
            # shellcheck disable=SC2068
            om --env "${ENV_FILE}" configure-product --vars-env OM_VAR \
              --config "configuration/${CONFIG_FILE}" ${vars_files_args[@]}

- name: upload-stemcell
  serial: true
  plan:
  - aggregate:
    - get: pcf-automation-image
      params:
        unpack: true
      passed:
      - upgrade-opsman
      trigger: true
    - get: pcf-automation-tasks
      params:
        unpack: true
    - get: stemcell
      trigger: true
    - get: configuration
    - get: pcf-automation-extension-tasks
  - task: credhub-interpolate
    image: pcf-automation-image
    file: pcf-automation-extension-tasks/tasks/credhub-interpolate-specific-dir.yml
    input_mapping:
      files: configuration
    params:
      # all required
      CREDHUB_CA_CERT: ((credhub_ca_cert.certificate))
      CREDHUB_CLIENT: concourse_to_credhub
      CREDHUB_SECRET: ((concourse_to_credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      PREFIX: /lab-foundation
      INTERPOLATE_PATH: ((foundation))/vars
  - task: upload-stemcell
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: interpolated-files
    params:
      ENV_FILE: env.yml

- name: upload-and-stage-healthwatch
  serial: true
  plan:
  - aggregate:
    - get: pcf-automation-image
      params:
        unpack: true
      passed:
      - upload-stemcell
      trigger: true
    - get: pcf-automation-tasks
      params:
        unpack: true
    - get: healthwatch-product
    - get: configuration
    - get: pcf-automation-extension-tasks
  - task: credhub-interpolate
    image: pcf-automation-image
    file: pcf-automation-extension-tasks/tasks/credhub-interpolate-specific-dir.yml
    input_mapping:
      files: configuration
    params:
      # all required
      CREDHUB_CA_CERT: ((credhub_ca_cert.certificate))
      CREDHUB_CLIENT: concourse_to_credhub
      CREDHUB_SECRET: ((concourse_to_credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      PREFIX: /lab-foundation
      INTERPOLATE_PATH: ((foundation))/vars
  - task: upload-and-stage-product
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/upload-and-stage-product.yml
    input_mapping:
      product: healthwatch-product
      env: interpolated-files
    params:
      ENV_FILE: env.yml

- name: configure-healthwatch
  serial: true
  plan:
  - aggregate:
    - get: pcf-automation-image
      params:
        unpack: true
      passed:
      - upload-and-stage-healthwatch
      trigger: true
    - get: pcf-automation-tasks
      params:
        unpack: true
    - get: configuration
    - get: pcf-automation-extension-tasks
  - task: credhub-interpolate
    image: pcf-automation-image
    file: pcf-automation-extension-tasks/tasks/credhub-interpolate-specific-dir.yml
    input_mapping:
      files: configuration
    params:
      # all required
      CREDHUB_CA_CERT: ((credhub_ca_cert.certificate))
      CREDHUB_CLIENT: concourse_to_credhub
      CREDHUB_SECRET: ((concourse_to_credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      PREFIX: /lab-foundation
      INTERPOLATE_PATH: ((foundation))/vars
  - task: configure-healthwatch
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: configuration
      env: interpolated-files
      vars: configuration
    params:
      CONFIG_FILE: ((foundation))/config/healthwatch.yml
      ENV_FILE: env.yml
      VARS_FILES: vars/((foundation))/vars/healthwatch-vars.yml

- name: apply-product-changes
  serial: true
  plan:
  - aggregate:
    - get: pcf-automation-image
      params:
        unpack: true
      passed:
      - configure-healthwatch
      - configure-pas
      trigger: true
    - get: pcf-automation-tasks
      params:
        unpack: true
    - get: configuration
    - get: pcf-automation-extension-tasks
  - task: credhub-interpolate
    image: pcf-automation-image
    file: pcf-automation-extension-tasks/tasks/credhub-interpolate-specific-dir.yml
    input_mapping:
      files: configuration
    params:
      # all required
      CREDHUB_CA_CERT: ((credhub_ca_cert.certificate))
      CREDHUB_CLIENT: concourse_to_credhub
      CREDHUB_SECRET: ((concourse_to_credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      PREFIX: /lab-foundation
      INTERPOLATE_PATH: ((foundation))/vars
  - task: apply-product-changes
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/apply-changes.yml
    input_mapping:
      env: interpolated-files
    params:
      ENV_FILE: env.yml

- name: staged-pas-config
  plan:
  - aggregate:
    - get: pcf-automation-image
      params:
        unpack: true
    - get: pcf-automation-tasks
      params:
        unpack: true
    - get: configuration
    - get: pcf-automation-extension-tasks
  - task: credhub-interpolate
    image: pcf-automation-image
    file: pcf-automation-extension-tasks/tasks/credhub-interpolate-specific-dir.yml
    input_mapping:
      files: configuration
    params:
      # all required
      CREDHUB_CA_CERT: ((credhub_ca_cert.certificate))
      CREDHUB_CLIENT: concourse_to_credhub
      CREDHUB_SECRET: ((concourse_to_credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      PREFIX: /lab-foundation
      INTERPOLATE_PATH: ((foundation))/vars
  - task: staged-config
    image: pcf-automation-image
    # file: pcf-automation-tasks/tasks/staged-config.yml
    # input_mapping:
    #   env: configuration
    # params:
    #   PRODUCT_NAME: cf
    #   ENV_FILE: ((foundation))/env/env.yml
    config:
      platform: linux

      inputs:
      - name: interpolated-files # contains the env file with target OpsMan Information

      outputs:
      - name: generated-config # will contain the staged product config

      params:
        PRODUCT_NAME: cf
        ENV_FILE: env.yml
        SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: true

      run:
        path: bash
        args:
        - "-c"
        - |
          p-automator -v
          set -eux

          flag=$(if "$SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS";
                then echo '--include-placeholders';
                else echo '--include-credentials';
                fi
                )

          om --env interpolated-files/"${ENV_FILE}" staged-config \
            --product-name "$PRODUCT_NAME" \
            "$flag" > generated-config/"$PRODUCT_NAME".yml
  - put: pcf-automation-output-pas-config # DODD: added this to get it to compile
    params:
      file: generated-config/cf.yml

- name: staged-healthwatch-config
  plan:
  - aggregate:
    - get: pcf-automation-image
      params:
        unpack: true
    - get: pcf-automation-tasks
      params:
        unpack: true
    - get: configuration
    - get: pcf-automation-extension-tasks
  - task: credhub-interpolate
    image: pcf-automation-image
    file: pcf-automation-extension-tasks/tasks/credhub-interpolate-specific-dir.yml
    input_mapping:
      files: configuration
    params:
      # all required
      CREDHUB_CA_CERT: ((credhub_ca_cert.certificate))
      CREDHUB_CLIENT: concourse_to_credhub
      CREDHUB_SECRET: ((concourse_to_credhub_secret))
      CREDHUB_SERVER: ((credhub_server))
      PREFIX: /lab-foundation
      INTERPOLATE_PATH: ((foundation))/vars
  - task: staged-config
    image: pcf-automation-image
    file: pcf-automation-extension-tasks/tasks/staged-config.yml
    input_mapping:
      env: interpolated-files
    params:
      PRODUCT_NAME: p-healthwatch
      ENV_FILE: env.yml
    # config:
    #   platform: linux

    #   inputs:
    #   - name: configuration # contains the env file with target OpsMan Information

    #   outputs:
    #   - name: generated-config # will contain the staged product config

    #   params:
    #     PRODUCT_NAME: p-healthwatch
    #     ENV_FILE: ((foundation))/env/env.yml
    #     SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: true

    #   run:
    #     path: bash
    #     args:
    #     - "-c"
    #     - |
    #       p-automator -v
    #       set -eux

    #       flag=$(if "$SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS";
    #             then echo '--include-placeholders';
    #             else echo '--include-credentials';
    #             fi
    #             )

    #       om --env configuration/"${ENV_FILE}" staged-config \
    #         --product-name "$PRODUCT_NAME" \
    #         "$flag" > generated-config/"$PRODUCT_NAME".yml
  - put: pcf-automation-output-healthwatch-config # DODD: added this to get it to compile
    params:
      file: generated-config/p-healthwatch.yml
